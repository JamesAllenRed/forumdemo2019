apiVersion: camel.apache.org/v1alpha1
kind: Integration
metadata:
  name: damage-service
spec:
  replicas: 1
  dependencies:
  - camel:undertow
  - camel:jackson
  - mvn:org.infinispan/infinispan-client-hotrod/9.4.12.Final
  - mvn:org.infinispan/infinispan-query-dsl/9.4.12.Final
  - mvn:org.infinispan/infinispan-commons/9.4.12.Final
  - mvn:org.codehaus.groovy/groovy-json/2.5.5
  profile: OpenShift
  sources:
  - name: damage-service.groovy
    content: |-      
      import org.apache.camel.AsyncCallback
      import org.apache.camel.AsyncProcessor
      import org.apache.camel.Exchange
      import org.apache.camel.Processor
      import org.apache.camel.Route
      import org.apache.camel.model.dataformat.JsonLibrary
      import org.apache.camel.support.RoutePolicySupport
      import org.apache.camel.util.AsyncProcessorHelper
      import org.apache.camel.component.undertow.UndertowHostOptions
      import org.infinispan.client.hotrod.RemoteCacheManager
      import org.infinispan.client.hotrod.RemoteCounterManagerFactory
      import org.infinispan.client.hotrod.configuration.ClientIntelligence
      import org.infinispan.client.hotrod.configuration.ConfigurationBuilder
      import org.infinispan.commons.marshall.StringMarshaller
      import org.infinispan.counter.exception.CounterOutOfBoundsException
      import java.nio.charset.StandardCharsets
      import java.util.concurrent.ExecutionException
      import java.util.concurrent.atomic.AtomicReference

      logger     = org.slf4j.LoggerFactory.getLogger("damage-game")
      mapper     = new com.fasterxml.jackson.databind.ObjectMapper()
      cacheHost  = 'datagrid-service.datagrid-demo.svc.cluster.local'
      cachePort  = 11222
      cacheCfg   = new ConfigurationBuilder().addServer().host(cacheHost).port(cachePort).marshaller(new StringMarshaller(StandardCharsets.UTF_8)).build()
      cacheMgr   = new RemoteCacheManager(cacheCfg)
      counterMgr = RemoteCounterManagerFactory.asCounterManager(cacheMgr)
  
      //
      // Configure undertow threading
      //
      def hostop = new UndertowHostOptions()
      hostop.ioThreads = 1
      hostop.workerThreads = 10

      context {
          components {
              undertow {
                  hostOptions = hostop
              }
          }
      }

      
      //
      // Read the game config, and continue reloading it.
      //
      cache  = cacheMgr.getCache('game')
      config = new AtomicReference<Map>()

      def loadConfig() { 
          String gamecfg = cache['game']
          if (gamecfg == null) {
              logger.warn("No game config found")
              System.exit(1)
          }
          config.set(mapper.readValue(gamecfg, Map.class))
      }

      loadConfig()

      from('timer:tick?period=5s')
          .process{ loadConfig() }
          .log('reloaded config')

      def applyDamage = {
          String kind = it.message.body.vibrationClass

          if (kind == null) {                  
              logger.warn("No kind found")
              return
          } 

          def    cname   = "machine-${it.message.body.machineId}"
          def    scount  = counterMgr.getStrongCounter(cname)
          Double damage  = config.get().damage."${kind}"
          Double multipl = config.get().damageMultiplier

          if (damage == null) {
              logger.warn("No damage defined for ${kind}")
              return
          }
          if (multipl == null) {
              logger.warn("No damage multiplier defined for ${kind}")
              return
          }

          long tdamage = damage.doubleValue() * multipl.doubleValue() * 1_000_000_000_000_000_000
          long starttm = System.currentTimeMillis()

          try {
              it.message.body.counter = scount.addAndGet(-tdamage).get()
          } catch (ExecutionException e) {
              it.message.body.note = e.getMessage()
              it.exception = e

              if (e.cause instanceof CounterOutOfBoundsException) {
                  it.exception = null
              }
          } catch (Exception e) {
              it.message.body.note = e.getMessage()
              it.exception = e
          } finally {
              it.message.body.damage = damage
              it.message.body.damageMultiplier = multipl
              it.message.body.damageApplied = tdamage
              it.message.body.duration = System.currentTimeMillis() - starttm
          }
      }

      from('undertow:http://0.0.0.0:8080/ApplyDamage')
          .routePolicy(new RoutePolicySupport() {
              @Override
              public void onExchangeDone(Route route, Exchange exchange) {
                logger.info('exchange duration={}, failed={}, data={}',
                    System.currentTimeMillis() - exchange.created.time,
                    exchange.exception != null,
                    exchange.message.getBody(String.class)
                )
              }
          })
          .unmarshal().json(JsonLibrary.Jackson, Map.class)
          .log('req: ${body}')
          .process(applyDamage as Processor)
          .marshal().json(JsonLibrary.Jackson)
  traits:
    gc:
      configuration:
        enabled: "false"
    service:
      configuration:
        auto: "false"
        port: "8080"
  configuration:
  - type: property
    value: camel.context.messageHistory=false
  - type: property
    value: camel.context.allowUseOriginalMessage=false
